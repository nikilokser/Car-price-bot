import telebot
import atexit
import difflib
import pandas as pd
import time
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from neo4j import GraphDatabase
from llama_analyzer import get_liquidity_analysis
from catboost_model import predict_car_price
import os

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ Docker (dotenv —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
if os.getenv('DOCKER_ENV') != 'true':
    from dotenv import load_dotenv
    load_dotenv()

# configuration load
TOKEN = os.getenv("BOT_TOKEN")
NEO4J_PASSWORD = os.getenv("NEO4J_PASSWORD")
NEO4J_URI = os.getenv("NEO4J_URI", "bolt://neo4j-db:7687")
NEO4J_USER = os.getenv("NEO4J_USER", "neo4j")

print(f"üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j: {NEO4J_URI}")
print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Neo4j: {NEO4J_USER}")

bot = telebot.TeleBot(TOKEN)

def wait_for_neo4j(max_attempts=60, delay=5):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Neo4j —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    for attempt in range(max_attempts):
        try:
            print(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j #{attempt + 1}/{max_attempts}")
            test_driver = GraphDatabase.driver(
                NEO4J_URI, 
                auth=(NEO4J_USER, NEO4J_PASSWORD),
                connection_timeout=10,
                max_connection_lifetime=30
            )
            with test_driver.session() as session:
                result = session.run("RETURN 'Connection successful' AS status")
                record = result.single()
                if record and record["status"] == "Connection successful":
                    print("‚úÖ Neo4j –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
                    test_driver.close()
                    return True
            test_driver.close()
        except Exception as e:
            print(f"‚è≥ Neo4j –Ω–µ –≥–æ—Ç–æ–≤ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_attempts - 1:
                time.sleep(delay)
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Neo4j")
    return False

# –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Neo4j
print("üîå –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Neo4j...")
if wait_for_neo4j():
    try:
        driver = GraphDatabase.driver(
            NEO4J_URI, 
            auth=(NEO4J_USER, NEO4J_PASSWORD),
            connection_timeout=15,
            max_connection_lifetime=300
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        with driver.session() as session:
            result = session.run("RETURN 'Connection successful' AS status")
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Neo4j —É—Å–ø–µ—à–Ω–æ!")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j: {e}")
        driver = None
else:
    print("‚ùå –ó–∞–ø—É—Å–∫ –±–µ–∑ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Neo4j")
    driver = None

@atexit.register
def cleanup():
    if driver:
        driver.close()

# temp storage
user_states = {}

# inline buttons
markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=False)
markup.add(KeyboardButton("/start"), KeyboardButton("/help"))

def normalize_transmission(value):
    replacements = {"–ê": "A", "–∞": "a", "–¢": "T", "—Ç": "t", "–ú": "M", "–º": "m"}
    return ''.join(replacements.get(ch, ch) for ch in value).upper().strip()

def get_all_titles():
    if not driver:
        return []
    try:
        with driver.session() as session:
            result = session.run("MATCH (c:Car) RETURN DISTINCT toLower(c.title) AS title")
            return [record["title"] for record in result]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {e}")
        return []

def get_years_by_model(title):
    if not driver:
        return []
    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(y:Year)
                WHERE c.title = $title
                RETURN DISTINCT y.value AS year
                ORDER BY y.value DESC
            """, title=title)
            return [record["year"] for record in result]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ–¥–æ–≤: {e}")
        return []

def get_transmissions(title, year):
    if not driver:
        return []
    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(:Year {value: $year}),
                      (c)-[:HAS_TRANSMISSION]->(t:Transmission)
                WHERE c.title = $title
                RETURN DISTINCT t.type AS transmission
            """, title=title, year=year)
            return [record["transmission"] for record in result]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–º–∏—Å—Å–∏–π: {e}")
        return []

def get_drives(title, year, transmission):
    if not driver:
        return []
    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(:Year {value: $year}),
                      (c)-[:HAS_TRANSMISSION]->(:Transmission {type: $transmission}),
                      (c)-[:HAS_DRIVE]->(d:Drive)
                WHERE c.title = $title
                RETURN DISTINCT d.type AS drive
            """, title=title, year=year, transmission=transmission)
            return [record["drive"] for record in result]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –ø—Ä–∏–≤–æ–¥–∞: {e}")
        return []

def get_colors(title, year, transmission, drive):
    if not driver:
        return []
    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(:Year {value: $year}),
                      (c)-[:HAS_TRANSMISSION]->(:Transmission {type: $transmission}),
                      (c)-[:HAS_DRIVE]->(:Drive {type: $drive}),
                      (c)-[:HAS_COLOR]->(clr:Color)
                WHERE c.title = $title
                RETURN DISTINCT clr.name AS color
            """, title=title, year=year, transmission=transmission, drive=drive)
            return [record["color"] for record in result]
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤: {e}")
        return []

def get_car_features(state):
    if not driver:
        return pd.DataFrame()
    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(y:Year {value: $year}),
                      (c)-[:HAS_TRANSMISSION]->(t:Transmission {type: $transmission}),
                      (c)-[:HAS_DRIVE]->(d:Drive {type: $drive}),
                      (c)-[:HAS_COLOR]->(clr:Color),
                      (c)-[:HAS_BODY]->(b:BodyType),
                      (c)-[:HAS_ENGINE]->(e:Engine),
                      (c)-[:HAS_ENV_STANDARD]->(env:EnvStandard),
                      (c)-[:HAS_FUEL_TYPE]->(f:Fuel),
                      (c)-[:FROM_AUCTION]->(a:Auction),
                      (c)-[:HAS_MILEAGE]->(m:Mileage),
                      (c)-[:HAS_POWER]->(p:Power),
                      (c)-[:HAS_CHINA_PRICE]->(cp:ChinaPrice)
                WHERE c.title = $title AND clr.name = $color
                RETURN a.location AS auction, b.type AS body_type, clr.name AS color, 
                       d.type AS drive_type, e.code AS engine, e.volume AS engine_volume,
                       env.standard AS environmental_standards, f.type AS fuel_type,
                       m.value AS mileage, p.value AS power, c.title AS title,
                       t.type AS transmission, y.value AS year, cp.value AS china_price,
                       c.url AS url
            """, state)
            return pd.DataFrame([record.data() for record in result])
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∞–≤—Ç–æ–º–æ–±–∏–ª—è: {e}")
        return pd.DataFrame()

def predict_price(state):
    df = get_car_features(state)
    if df.empty:
        return None, []

    predicted_price = predict_car_price(df)

    if not driver:
        return predicted_price, []

    try:
        with driver.session() as session:
            result = session.run("""
                MATCH (c:Car)-[:HAS_YEAR]->(:Year {value: $year}),
                      (c)-[:HAS_TRANSMISSION]->(:Transmission {type: $transmission}),
                      (c)-[:HAS_DRIVE]->(:Drive {type: $drive}),
                      (c)-[:HAS_COLOR]->(:Color {name: $color}),
                      (c)-[:HAS_CHINA_PRICE]->(cp:ChinaPrice)
                WHERE c.title = $title AND cp.value < $predicted_price
                RETURN c.url AS url
            """, {
                "title": state["title"],
                "year": state["year"],
                "transmission": state["transmission"],
                "drive": state["drive"],
                "color": state["color"],
                "predicted_price": predicted_price
            })

            cheaper_urls = [record["url"] for record in result if record["url"]]

        return predicted_price, cheaper_urls
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–Ω—ã: {e}")
        return predicted_price, []

@bot.message_handler(commands=['start'])
def send_welcome(message):
    welcome_text = (
        "üöó‚ú® *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É–º–Ω–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –∫–∏—Ç–∞–π—Å–∫–∏–º –∞—É–∫—Ü–∏–æ–Ω–∞–º –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π!* ‚ú®üöó\n\n"
        "–Ø –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ª—É—á—à–∏–π –≤—ã–±–æ—Ä –∏ –ø–æ–ª—É—á–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n"
        "üîπ *–ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã* ‚Äî —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥—Å–∫–∞–∂—É –ø—Ä–∏–º–µ—Ä–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.\n"
        "üîπ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω* ‚Äî –ø–æ–∫–∞–∂—É, –≤ –∫–∞–∫–∏—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö –æ–±—ã—á–Ω–æ –≤–∞—Ä—å–∏—Ä—É—é—Ç—Å—è —Ü–µ–Ω—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–π.\n"
        "üîπ *–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å –∏ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç—å* ‚Äî —Ä–∞—Å—Å–∫–∞–∂—É, –Ω–∞—Å–∫–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä–æ –∏ –ª–µ–≥–∫–æ –ø—Ä–æ–¥–∞—ë—Ç—Å—è —ç—Ç–∞ –º–æ–¥–µ–ª—å –Ω–∞ —Ä—ã–Ω–∫–µ.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
        "`Toyota Camry`\n\n"
        "üöÄ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ, –∏ –º—ã –ø—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ–∏—Å–∫—É –∏ –∞–Ω–∞–ª–∏–∑—É!"
    )
    bot.reply_to(message, welcome_text, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(commands=['help'])
def send_help(message):
    welcome_text = (
        "–í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:\n"
        "@crdlts\n"
        "@nikilokser"
    )
    bot.reply_to(message, welcome_text, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda msg: True)
def handle_model_input(message):
    user_input = message.text.strip().lower()
    titles = get_all_titles()
    cid = message.chat.id

    if user_input in titles:
        user_states[cid] = {"title": user_input}
        years = get_years_by_model(user_input)
        markup = InlineKeyboardMarkup()
        for y in years:
            markup.add(InlineKeyboardButton(str(y), callback_data=f"year|{y}"))
        bot.send_message(cid, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=markup)
        return

    matches = difflib.get_close_matches(user_input, titles, n=1, cutoff=0.6)
    if matches:
        suggested = matches[0]
        markup = InlineKeyboardMarkup()
        markup.row(
            InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"yes|{suggested}"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no|")
        )
        bot.send_message(cid, f"ü§î –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É: *{suggested.title()}*", parse_mode="Markdown", reply_markup=markup)
    else:
        bot.send_message(cid, "üö´ –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

@bot.callback_query_handler(func=lambda call: True)
def handle_selection(call):
    cid = call.message.chat.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ call.data
        if not call.data:
            bot.send_message(cid, "‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º
        if call.data.startswith(("yes|", "year|", "transmission|", "drive|", "color|")) and "|" not in call.data:
            bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
            return

        if call.data.startswith("yes|"):
            parts = call.data.split("|", 1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ 2 —á–∞—Å—Ç–∏
            if len(parts) < 2:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            title = parts[1]
            user_states[cid] = {"title": title}
            years = get_years_by_model(title)
            markup = InlineKeyboardMarkup()
            for y in years:
                markup.add(InlineKeyboardButton(str(y), callback_data=f"year|{y}"))
            bot.send_message(cid, "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞:", reply_markup=markup)

        elif call.data.startswith("year|"):
            parts = call.data.split("|", 1)
            if len(parts) < 2:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            try:
                year = int(parts[1])
            except ValueError:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥.")
                return
            user_states[cid]["year"] = year
            trans = get_transmissions(user_states[cid]["title"], year)
            markup = InlineKeyboardMarkup()
            for t in trans:
                markup.add(InlineKeyboardButton(t, callback_data=f"transmission|{t}"))
            bot.send_message(cid, "‚öôÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–æ–±–∫—É –ø–µ—Ä–µ–¥–∞—á:", reply_markup=markup)

        elif call.data.startswith("transmission|"):
            parts = call.data.split("|", 1)
            if len(parts) < 2:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            t = parts[1]
            user_states[cid]["transmission"] = normalize_transmission(t)
            drives = get_drives(user_states[cid]["title"], user_states[cid]["year"], t)
            markup = InlineKeyboardMarkup()
            for d in drives:
                markup.add(InlineKeyboardButton(d, callback_data=f"drive|{d}"))
            bot.send_message(cid, "üõû –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–∏–≤–æ–¥–∞:", reply_markup=markup)

        elif call.data.startswith("drive|"):
            parts = call.data.split("|", 1)
            if len(parts) < 2:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            d = parts[1]
            user_states[cid]["drive"] = d
            colors = get_colors(user_states[cid]["title"], user_states[cid]["year"], user_states[cid]["transmission"], d)
            markup = InlineKeyboardMarkup()
            for c in colors:
                markup.add(InlineKeyboardButton(c, callback_data=f"color|{c}"))
            bot.send_message(cid, "üé® –í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=markup)

        elif call.data.startswith("color|"):
            parts = call.data.split("|", 1)
            if len(parts) < 2:
                bot.send_message(cid, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.")
                return
            user_states[cid]["color"] = parts[1]

            state = user_states[cid]
            predicted, links = predict_price(state)

            if predicted is None:
                bot.send_message(cid, "üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏.")
            else:
                summary = (
                    f"üì¶ *–ú–æ–¥–µ–ª—å —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ —Ö–∞—Ä–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏:*\n\n"
                    f"üöó –ú–æ–¥–µ–ª—å: *{state['title'].title()}*\n"
                    f"üìÖ –ì–æ–¥: *{state['year']}*\n"
                    f"‚öôÔ∏è –ö–ü–ü: *{state['transmission']}*\n"
                    f"üõû –ü—Ä–∏–≤–æ–¥: *{state['drive']}*\n"
                    f"üé® –¶–≤–µ—Ç: *{state['color']}*\n\n"
                )

                analysis = get_liquidity_analysis(state, predicted) # llama analysis

                msg = summary
                msg += f"üìà *–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–∞—è —Ü–µ–Ω–∞:* `{predicted} ¬•`\n\n"
                msg += f"üìä *–ê–Ω–∞–ª–∏–∑ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏:*\n{analysis}\n\n"

                if links:
                    msg += "üîó *–û–±—ä—è–≤–ª–µ–Ω–∏—è –¥–µ—à–µ–≤–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∞:*\n" + "\n".join(f"{i+1}. {link}" for i, link in enumerate(links))
                else:
                    msg += "üöò –û–±—ä—è–≤–ª–µ–Ω–∏–π –¥–µ—à–µ–≤–ª–µ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º–æ–π —Ü–µ–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

                bot.send_message(cid, msg, parse_mode="Markdown")

            user_states.pop(cid, None)

        elif call.data.startswith("no|"):
            bot.send_message(cid, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è.")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_selection: {e}")
        bot.send_message(cid, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        user_states.pop(cid, None)

bot.polling(timeout=60, long_polling_timeout=10)
